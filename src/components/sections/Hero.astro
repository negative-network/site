---
import { Image } from "astro:assets";
import logo from "@assets/images/logo-NN.gif";
---

<section id="hero-container" class="scrolled-to relative">

  <div
    class="flex flex-col w-full p-8 mx-auto max-w-7xl child:py-8 md:px-12 lg:px-24"
  >
    <div class="max-w-4xl mx-auto text-center lg:-mt-40">
      <Image
        src={logo}
        width={125}
        height={125}
        alt="Logo Negative Network"
        class:list={"m-auto my-10"}
      />

      <p
        class="mt-8 mb-12 text-4xl font-medium tracking-tight text-black md:text-5xl font-display"
      >
        Depuis 2011, l’agence NN réalise des projets web professionnels
      </p>
      <p class="max-w-2xl mx-auto mt-4 text-base text-gray-500 lg:text-xl">
        Nous proposons des solutions open source adaptées aux différents types
        de projets frontend et backend, tout en valorisant l’éco-conception,
        l’expérience utilisateur et la sécurité.
      </p>
    </div>

    <div class="flex flex-col justify-center gap-10 md:gap-20 sm:flex-row">
      <a
        class="inline-flex items-center justify-center w-full h-12 px-10 py-3 font-medium text-center duration-200 border rounded-xl focus-visible:outline-black focus:outline-none lg:w-auto text-black/80 bg-black text-white hover:bg-white hover:text-black"
        href="/expertises">Expertises</a
      >
      <a
        class="inline-flex items-center justify-center w-full h-12 px-10 py-3 font-medium text-center duration-200 border rounded-xl focus-visible:outline-black focus:outline-none lg:w-auto text-black/80 bg-black text-white hover:bg-white hover:text-black"
        href="/portfolio"
        >Portfolio
      </a>
    </div>
  </div>

  <script>
    let heroContainer = document.getElementById("hero-container");
    let maxx = heroContainer.clientWidth;
    let maxy = heroContainer.clientHeight;
    let halfx = maxx / 2;
    let halfy = maxy / 2;
    let canvas = document.createElement("canvas");
    heroContainer.appendChild(canvas);

    canvas.style.position = "absolute";
    canvas.style.top = "0";
    canvas.style.left = "0";
    canvas.style.zIndex = "-1";
    canvas.width = maxx;
    canvas.height = maxy;
    let context = canvas.getContext("2d");
    let dotCount = 50;
    let dots = [];
    // create dots
    for (let i = 0; i < dotCount; i++) {
      dots.push(new dot());
    }

    // dots animation
    function render() {
      context.fillStyle = "#ffffff";
      context.fillRect(0, 0, maxx, maxy);
      for (let i = 0; i < dotCount; i++) {
        dots[i].draw();
        dots[i].move();
      }
      requestAnimationFrame(render);
    }

    // dots class
    // @constructor
    function dot() {
      this.rad_x = 2 * Math.random() * halfx + 1;
      this.rad_y = 1.2 * Math.random() * halfy + 1;
      this.alpha = Math.random() * 360 + 1;
      this.speed = Math.random() * 100 < 50 ? 1 : -1;
      this.speed *= 0.1;
      this.size = Math.random() * 5 + 1;
      this.color = Math.floor(Math.random() * 256);
    }

    // drawing dot
    dot.prototype.draw = function () {
      // calc polar coord to decart
      let dx = halfx + this.rad_x * Math.cos((this.alpha / 180) * Math.PI);
      let dy = halfy + this.rad_y * Math.sin((this.alpha / 180) * Math.PI);
      // set color
      context.fillStyle =
        "rgb(" + this.color + "," + this.color + "," + this.color + ")";
      // draw dot
      context.fillRect(dx, dy, this.size, this.size);
    };

    // calc new position in polar coord
    dot.prototype.move = function () {
      this.alpha += this.speed;
      // change color
      if (Math.random() * 100 < 50) {
        this.color += 1;
      } else {
        this.color -= 1;
      }
    };

    // start animation
    render();
  </script>

</section>
